{"version":3,"sources":["Settings/Settings.js","Count/Value.js","Count/BTNS.js","Count/Count.js","Redux/store.js","App.js","serviceWorker.js","index.js"],"names":["Settings","render","props","btnColors","_this","min","max","count_start","btnColor","set","react_default","a","createElement","className","type","value","onChange","MaxValue","MinValue","disabled","onClick","setValue","concat","React","Component","Value","changeColor","BTNS","count_value","errorForInc","setToZero","errorForReset","Count","Count_Value","Count_BTNS","error","initialState","store","createStore","state","arguments","length","undefined","action","_objectSpread","Number","App","countValue","incorrect","e","target","maxValue","setState","minValue","incorrectSet","console","log","src_Count_Count","src_Settings_Settings","ConnectedApp","connect","dispatch","maxValueAC","minValueAC","setToZeroAC","setValueAC","Boolean","window","location","hostname","match","ReactDOM","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.714a8a80.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../Count_2.css'\r\n\r\nclass Settings extends React.Component {\r\n    render = (props) => {\r\n        let btnColors = this.props.min < 0 || this.props.min === \"\" || this.props.min >= this.props.max || this.props.count_start === this.props.max  ? 'disabled' : '' ;\r\n        let btnColor= this.props.set  ?'disabled':'btn_color';\r\n        return (\r\n            <div className='counter_box2'>\r\n                <div className='counters2'>\r\n                    <div className='center2'>\r\n                        <div className='count2'>\r\n                            <span className='value_style'>maxValue</span>\r\n                            <input className={btnColors} type='number' value={this.props.max}\r\n                                   onChange={this.props.MaxValue}/>\r\n                        </div>\r\n                        <div className='count2'>\r\n                            <span className='value_style'>minValue</span>\r\n                            <input className={btnColors} type='number' value={this.props.min}\r\n                                   onChange={this.props.MinValue}/>\r\n                        </div>\r\n                        <div className='btn'>\r\n                            <div className='btn_border'>\r\n                                <button\r\n                                    disabled={this.props.set}\r\n                                    onClick={this.props.setValue}\r\n                                    className={`${btnColor} ${btnColors}`}>Set\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Settings;","import React from 'react';\nimport '../App.css';\n\nclass Value extends React.Component {\n\n    render = () => {\n        let changeColor = this.props.count_start===this.props.max ? 'error': '';\n        return (\n            <div className='values'>\n                <span className={changeColor}>{this.props.count_start}</span>\n            </div>\n        )\n    }\n}\nexport default Value;\n\n","import React from 'react';\nimport '../App.css';\n\n\nclass BTNS extends React.Component {\n    render = () => {\n        let btnColors= this.props.set  ?'disabled':'btn_color';\n        let btnColor = this.props.min < 0 || this.props.min === \"\" || this.props.min >= this.props.max || this.props.count_start === this.props.max || typeof(this.props.count_start) === 'string' ? 'disabled' : '';\n        return (\n            <div className='btns'>\n                <div className='btn_border'>\n                    <button className={`${btnColor} ${btnColors}`}\n                            onClick={this.props.count_value}\n                            disabled={this.props.errorForInc}>\n                        Inc\n                    </button>\n                </div>\n                <div className='btn_border'>\n                    <button\n                        onClick={this.props.setToZero}\n                        disabled={this.props.errorForReset}\n                        className={this.props.errorForReset ? 'disabled' : 'btn_color'}>\n                        Reset\n                    </button>\n                </div>\n            </div>\n        )\n    }\n}\nexport default BTNS;\n\n","import React from 'react';\nimport '../App.css';\nimport Value from \"./Value\";\nimport BTNS from \"./BTNS\";\n\n\nclass Count extends React.Component {\n    render = () => {\n        return (\n            <div className='counter_box'>\n                <div className='counters'>\n                    <div className='center'>\n                        <Value count_start={this.props.count_start}\n                        max={this.props.max}\n                        />\n                        <BTNS count_value={this.props.count_value}\n                              setToZero={this.props.setToZero}\n                              count_start={this.props.count_start}\n                              min={this.props.min}\n                              max={this.props.max}\n                              errorForReset={this.props.error}\n                              errorForInc={typeof(this.props.count_start) === 'string'}\n                        />\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\nexport default Count;\n\n","import {createStore} from \"redux\";\r\n\r\n\r\nexport const COUNT_VALUE = \"COUNT_VALUE\";\r\nexport const INCORRECT = \"INCORRECT\";\r\nexport const MAX_VALUE = \"MAX_VALUE\";\r\nexport const MIN_VALUE = \"MIN_VALUE\";\r\nexport const SET_VALUE = \"SET_VALUE\";\r\nexport const SET_TO_ZERO = \"SET_TO_ZERO\";\r\nexport const INCORRECT_SET = \"INCORRECT_SET\";\r\n\r\nconst initialState = {\r\n    count_start: 0,\r\n    min: 0,\r\n    max: 20,\r\n    error: false,\r\n    set: false\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case COUNT_VALUE: {\r\n            return {\r\n                ...state,\r\n                count_start: state.count_start + 1\r\n            }\r\n        }\r\n\r\n        case INCORRECT: {\r\n            return {\r\n                ...state,\r\n                count_start: 'Error'\r\n            }\r\n        }\r\n        case INCORRECT_SET: {\r\n            return {\r\n                ...state,\r\n                count_start: 'press set'\r\n            }\r\n        }\r\n        case MAX_VALUE: {\r\n            return {\r\n                ...state,\r\n                max: Number(action.max)\r\n            }\r\n        }\r\n        case MIN_VALUE: {\r\n            return {\r\n                ...state,\r\n                min: Number(action.min)\r\n            }\r\n        }\r\n        case SET_VALUE: {\r\n            return {\r\n                ...state,\r\n                count_start: action.min\r\n            }\r\n        }\r\n        case SET_TO_ZERO: {\r\n            return {\r\n                ...state,\r\n                count_start: action.min\r\n            }\r\n        }\r\n    }\r\n    return state\r\n};\r\n    export const incorrectAC = () => {\r\n        return {type: INCORRECT}\r\n    };\r\n    export const incorrectSetAC = () => {\r\n        return {type: INCORRECT_SET}\r\n    };\r\n    export const maxValueAC = (max) => {\r\n        return {type: MAX_VALUE, max}\r\n    };\r\n    export const minValueAC = (min) => {\r\n        return {type: MIN_VALUE, min}\r\n    };\r\n    export const setValueAC = (min) => {\r\n        return {type: SET_VALUE, min}\r\n    };\r\n    export const setToZeroAC = (min) => {\r\n        return {type: SET_TO_ZERO, min}\r\n    };\r\n    export const countValueAC = () => {\r\n        return {type: COUNT_VALUE}\r\n    };\r\n\r\n    const store = createStore(reducer);\r\n    export default store;","import React from 'react';\nimport './App.css';\nimport Settings from \"./Settings/Settings\";\nimport Count from \"./Count/Count\";\nimport {connect} from \"react-redux\";\nimport {\n    countValueAC,\n    incorrectAC, incorrectSetAC,\n    maxValueAC,\n    minValueAC,\n    setToZeroAC,\n    setValueAC\n} from \"./Redux/store\";\n\nclass App extends React.Component {\n\n\n    state = {\n        error: false,\n        set: false\n    };\n\n    count_value = () => {\n        if (this.props.count_start < this.props.max) {\n            this.props.countValue();\n        }\n    };\n\n    incorrect = () => {\n        if (this.props.min < 0 || this.props.min === \"\" || this.props.min >= this.state.max) {\n            this.props.incorrect();\n        }\n    };\n\n    MaxValue = (e) => {\n        let value = e.target.value;\n        this.props.maxValue(value);\n        this.setState({\n            set: true,\n            error: true\n        }, () => {\n            this.incorrect()\n        })\n    };\n\n\n    MinValue = (e) => {\n        let value = e.target.value;\n        this.props.minValue(value);\n        this.props.incorrectSet();\n        this.setState({\n            set: true,\n            error: true\n        }, () => {\n            this.incorrect()\n        })\n\n    };\n    setValue = () => {\n        if (this.props.max > this.props.min && this.props.min >= 0) {\n            this.props.setValue(this.props.min)\n            this.setState({\n                    error: false,\n                    set: false\n                }\n            )\n\n        }\n    };\n    setToZero = () => {\n        this.props.setToZero(this.props.min);\n    };\n\n    render = () => {\n        console.log(this.props.count_start, this.state.error, this.props.max, this.state.set)\n        return (\n            <div className='middle'>\n                <Count count_start={this.props.count_start}\n                       setToZero={this.setToZero}\n                       count_value={this.count_value}\n                       error={this.state.error}\n                       max={this.props.max}\n                       MinValue={this.MinValue}\n                       MaxValue={this.MaxValue}\n                />\n\n                <Settings\n                    min={this.props.min}\n                    max={this.props.max}\n                    MinValue={this.MinValue}\n                    MaxValue={this.MaxValue}\n                    set={!this.state.set}\n                    setValue={this.setValue}\n                    incorrect={this.props.incorrect}\n                />\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        count_start: state.count_start,\n        min: state.min,\n        max: state.max,\n        error: state.error,\n        set: state.set\n    }\n};\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        incorrect() {\n            const action = incorrectAC();\n            dispatch(action);\n        },\n        incorrectSet() {\n            const action = incorrectSetAC();\n            dispatch(action);\n        },\n        maxValue(max) {\n            const action = maxValueAC(max);\n            dispatch(action);\n        },\n        minValue: (min) => {\n            const action = minValueAC(min);\n            dispatch(action)\n        },\n        countValue: () => {\n\n            const action = countValueAC();\n            dispatch(action)\n        },\n        setToZero: (min) => {\n            const action = setToZeroAC(min);\n            dispatch(action)\n        },\n        setValue: (min) => {\n            const action = setValueAC(min);\n            dispatch(action)\n        }\n    }\n};\n\n\nconst ConnectedApp = connect(mapStateToProps,\n    mapDispatchToProps)(App);\nexport default ConnectedApp;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from \"./Redux/store\";\n\n\nReactDOM.render(<Provider store={store}><App/></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}